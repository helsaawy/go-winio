//go:build windows

// Code generated by 'go generate' using "github.com/Microsoft/go-winio/tools/mkwinsyscall"; DO NOT EDIT.

package handle

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modKernelbase = windows.NewLazySystemDLL("Kernelbase.dll")
	modkernel32   = windows.NewLazySystemDLL("kernel32.dll")

	procCompareObjectHandles = modKernelbase.NewProc("CompareObjectHandles")
	procGetHandleInformation = modkernel32.NewProc("GetHandleInformation")
)

func Compare(one windows.Handle, two windows.Handle) (b bool) {
	r0, _, _ := syscall.Syscall(procCompareObjectHandles.Addr(), 2, uintptr(one), uintptr(two), 0)
	b = r0 != 0
	return
}

func getHandleInformation(h windows.Handle, i *Flags) (err error) {
	r1, _, e1 := syscall.Syscall(procGetHandleInformation.Addr(), 2, uintptr(h), uintptr(unsafe.Pointer(i)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
