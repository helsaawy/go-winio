//go:build windows

// Code generated by 'go generate' using "github.com/Microsoft/go-winio/tools/mkwinsyscall".
// DO NOT EDIT.

package kernel

import (
	"syscall"
	"unsafe"

	"github.com/Microsoft/go-winio/internal/wintype"
	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")

	procLocalAlloc   = modkernel32.NewProc("LocalAlloc")
	procLocalFree    = modkernel32.NewProc("LocalFree")
	procLocalReAlloc = modkernel32.NewProc("LocalReAlloc")
)

func LocalAlloc(flags wintype.UInt, bytes wintype.SizeT) (mem wintype.HLocal, err error) {
	r0, _, e1 := syscall.Syscall(procLocalAlloc.Addr(), 2, uintptr(flags), uintptr(bytes), 0)
	mem = wintype.HLocal(r0)
	if mem == 0 {
		err = errnoErr(e1)
	}
	return
}

func LocalAllocP(flags wintype.UInt, bytes wintype.SizeT) (mem wintype.HLocal) {
	r0, _, e1 := syscall.Syscall(procLocalAlloc.Addr(), 2, uintptr(flags), uintptr(bytes), 0)
	mem = wintype.HLocal(r0)
	if mem == 0 {
		err := errnoErr(e1)
		panic(err)
	}
	return
}

func LocalFree(hmem wintype.HLocal) (mem wintype.HLocal, err error) {
	r0, _, e1 := syscall.Syscall(procLocalFree.Addr(), 1, uintptr(hmem), 0, 0)
	mem = wintype.HLocal(r0)
	if mem != 0 {
		err = errnoErr(e1)
	}
	return
}

func LocalFreeP(hmem wintype.HLocal) (mem wintype.HLocal) {
	r0, _, e1 := syscall.Syscall(procLocalFree.Addr(), 1, uintptr(hmem), 0, 0)
	mem = wintype.HLocal(r0)
	if mem != 0 {
		err := errnoErr(e1)
		panic(err)
	}
	return
}

func LocalReAlloc(hmem wintype.HLocal, bytes wintype.SizeT, flags wintype.UInt) (mem wintype.HLocal, err error) {
	r0, _, e1 := syscall.Syscall(procLocalReAlloc.Addr(), 3, uintptr(hmem), uintptr(bytes), uintptr(flags))
	mem = wintype.HLocal(r0)
	if mem == 0 {
		err = errnoErr(e1)
	}
	return
}

func LocalReAllocP(hmem wintype.HLocal, bytes wintype.SizeT, flags wintype.UInt) (mem wintype.HLocal) {
	r0, _, e1 := syscall.Syscall(procLocalReAlloc.Addr(), 3, uintptr(hmem), uintptr(bytes), uintptr(flags))
	mem = wintype.HLocal(r0)
	if mem == 0 {
		err := errnoErr(e1)
		panic(err)
	}
	return
}
